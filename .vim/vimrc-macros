" Basic Settings

call pathogen#runtime_append_all_bundles()
set encoding=utf8
" No auto-wrap text using textwidth.
set formatoptions -=t
" LibreOffice's clang-format has ColumnLimit:100, wrap comments accordingly.
set textwidth=100
" When a bracket is inserted, don't jump briefly to the matching one.
set noshowmatch
" Look in the current directory for "tags", and work up the tree towards root
" until one is found.
set tags=./tags;/
source $VIMRUNTIME/macros/matchit.vim
set maxmempattern=2000
" Fine-tune completion: make it bash-like.
set wildmenu
set wildmode=longest,list
" No indent after namespaces.
set cinoptions=N-s
" auto-disable xpath if necessary
py << EOF
import vim
try:
    import lxml
except ImportError:
    vim.command('let g:skip_xpath = 1')
EOF

" Avoid 'set clipboard=...', this way vim selection / X11 selection / clipboard nicely stays
" independent. And in case writing to the X11 clipboard is needed, that can be done using '"+y'.

" http://andrew.stwrt.ca/posts/project-specific-vimrc/
set exrc
set secure
" :help leader
let mapleader = ","
" Client code for <https://github.com/libclang-vim/libclang-vim>.
if filereadable($HOME . "/.vim/bundle/libclang-vim/documentation/examples.vim")
        source $HOME/.vim/bundle/libclang-vim/documentation/examples.vim
endif

" FileType-specific settings

" vim -b : edit binary using xxd-format!
augroup Binary
    autocmd!
    autocmd BufReadPre  *.bin let &bin=1
    autocmd BufReadPost *.bin if &bin | %!xxd
    autocmd BufReadPost *.bin set ft=xxd | endif
    autocmd BufWritePre *.bin if &bin | %!xxd -r
    autocmd BufWritePre *.bin endif
    autocmd BufWritePost *.bin if &bin | %!xxd
    autocmd BufWritePost *.bin set nomod | endif
augroup END

" 'Do what I mean' style current function name functionality.
"
" Semantic result would include all namespaces, YCM would even omit the class name for a member
" function. This one uses the 'as written' form, leading to the least surprising results.
fun! ShowFuncName()
  let lnum = line(".")
  let col = col(".")
  echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
  call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun

augroup Cpp
    autocmd!
    "autocmd FileType cpp nnoremap <silent><leader>cc :call ClangInspectComment()<cr>
    "autocmd FileType cpp nnoremap <silent><leader>cd :call ClangJumpDeclaration()<cr>
    "autocmd FileType cpp nnoremap <silent><leader>cf :call ClangInspectFunction()<cr>
    autocmd FileType cpp nnoremap <silent><leader>cn :call ClangInspectName()<cr>
    "autocmd FileType cpp nnoremap <silent><leader>ci :call ClangJumpInclude()<cr>
    "autocmd FileType cpp nnoremap <silent><leader>ct :call ClangInspectType()<cr>
    "autocmd FileType cpp set omnifunc=ClangInspectCompletion

    autocmd FileType cpp nnoremap <silent><leader>cf :call ShowFuncName() <cr>

    " YCM setup:
    " git clone https://github.com/Valloric/YouCompleteMe.git
    " cd YouCompleteMe
    " git submodule update --init --recursive
    " ./install.py --clangd-completer
    " # --rust-completer
    " # --go-completer
    " # --java-completer
    " # --cs-completer
    "
    " YCM update:
    " git checkout 321700e848595af129d5d75afac92d0060d3cdf9 (2020-07-15)
    " git submodule update --recursive
    "
    " YCM options
    " Only suggest when asked explicitly, except for C++.
    let g:ycm_auto_trigger = 0
    autocmd FileType cpp let g:ycm_auto_trigger = 1
    " Don't show error messages automatically. (Get a detailed diagnostic
    " message with <leader>d.)
    "let g:ycm_show_diagnostics_ui = 0
    " Do this for C# where there are false positives.
    autocmd FileType cs let g:ycm_show_diagnostics_ui = 0
    " Populate vims location list with new diagnostic data, so that :lprev and
    " lnext can jump to the prev/next error.
    let g:ycm_always_populate_location_list = 1
    " Auto-close the auto-opened preview window.
    let g:ycm_autoclose_preview_window_after_completion = 1
    " Don't start indexing in the background, like libclang did.
    " Also ignore a .clang-tidy which may be there.
    let g:ycm_clangd_args = ["-background-index=false", "--clang-tidy=false"]
    " YCM key bindings
    autocmd FileType cpp nnoremap <silent><leader>cc :YcmCompleter GetDoc<cr>
    autocmd FileType cpp nnoremap <silent><leader>cd :YcmCompleter GoToDeclaration<cr>
    autocmd FileType rust nnoremap <silent><leader>cd :YcmCompleter GoToDeclaration<cr>
    autocmd FileType python nnoremap <silent><leader>cd :YcmCompleter GoTo<cr>
    autocmd FileType go nnoremap <silent><leader>cd :YcmCompleter GoTo<cr>
    autocmd FileType cpp nnoremap <silent><leader>ci :YcmCompleter GoToInclude<cr>
    autocmd FileType cpp nnoremap <silent><leader>ct :YcmCompleter GetType<cr>
    " :ccl closes the quickfix window.
    autocmd FileType cpp nnoremap <silent><leader>cx :YcmCompleter FixIt<cr>
    autocmd FileType cpp nnoremap <silent><leader>cr :pyf $HOME/git/llvm/clang/tools/clang-rename/clang-rename.py<cr>
    autocmd FileType cpp vnoremap <silent><leader>gq :pyf $HOME/git/llvm/clang/tools/clang-format/clang-format.py<cr>
    autocmd FileType objc vnoremap <silent><leader>gq :pyf $HOME/git/llvm/clang/tools/clang-format/clang-format.py<cr>
    autocmd FileType javascript vnoremap <silent><leader>gq :pyf $HOME/git/llvm/clang/tools/clang-format/clang-format.py<cr>
    autocmd FileType java vnoremap <silent><leader>gq :pyf $HOME/git/llvm/clang/tools/clang-format/clang-format.py<cr>
    autocmd FileType go nnoremap <silent><leader>gq :% !goimports<CR>
augroup END

augroup Mutt
    autocmd!
    if filereadable($HOME . "/git/vmexam/mutt/contacts/search.vim")
            source $HOME/git/vmexam/mutt/contacts/search.vim
    endif
    autocmd Filetype mail set omnifunc=MuttContactsCompletion
augroup END

augroup Ly
    autocmd!
    autocmd BufNewFile,BufReadPost,BufEnter *.ly so /usr/share/lilypond/2.12.1/vim/syntax/lilypond.vim
augroup END

augroup Swig
    autocmd!
    autocmd BufRead */swig*/* set tabstop=8 | set shiftwidth=2 | set softtabstop=2 | set expandtab " SWIG
    autocmd BufRead */swig*/Source/* set tabstop=8 | set shiftwidth=2 | set softtabstop=2 | set noexpandtab " SWIG Source
    autocmd BufNewFile,BufRead *.i set filetype=swig
    autocmd BufNewFile,BufRead *.swg set filetype=swig
augroup END

augroup Go
    autocmd!
    au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
augroup END

augroup Zip
    autocmd!
    autocmd BufReadCmd *.docx,*.docm,*.dotx,*.dotm,*.xlsx,*.pptx,*.vsdx,*.apk call zip#Browse(expand("<amatch>"))
    autocmd BufReadCmd *.odt,*.odm,*.ott,*.ods,*.ots,*.odp,*.otp,*.odg,*.otg,*.oxt,*.odb call zip#Browse(expand("<amatch>"))
    autocmd BufReadCmd *.sxw,*.stw,*.bau call zip#Browse(expand("<amatch>"))
    autocmd BufReadCmd *.k3b,*.egg,*.epub,*.reqifz call zip#Browse(expand("<amatch>"))
augroup END

augroup Arduino
    autocmd!
    autocmd BufNewFile,BufRead *.ino set filetype=cpp
augroup END

" Mappings

" 4 spaces instead of tabs style spacing
noremap <F4> <Esc>:set shiftwidth=4<CR>:set softtabstop=4<CR>:set expandtab<CR>
noremap <F5> <Esc>:setlocal spell spelllang=en_us<CR>
noremap <F6> <Esc>:setlocal spell spelllang=hu<CR>
noremap <F7> <Esc>:setlocal nospell<CR>
" View utf8 files as if they would be iso-8859-2 ones.
noremap <F8> :set termencoding=utf8<CR>:set encoding=latin2<CR>
set pastetoggle=<F9>
" Print full path + line number that can be copy&pasted easily.
" See <http://vim.wikia.com/wiki/Get_the_name_of_the_current_file>.
noremap <F10> :echo expand('%:p').':'.line('.')<CR>
noremap <F11> :set ff=unix<CR>:% !prettyprint<CR>
command XPath XPathSearchPrompt
command GotoRandom pyf $HOME/git/vmexam/vim/goto-random.py
" libreoffice: smartart sanitize
nnoremap <silent><leader>ls :% !pptx-kill-uuid.py<cr>
" Map Ctrl-Space to Ctrl-X Ctrl-O
inoremap <C-@> <C-x><C-o>
" Allow acception a suggestion with <CR>, from
" <https://github.com/Valloric/YouCompleteMe/issues/1282#issuecomment-228254509>.
inoremap <expr> <CR> pumvisible() ? "\<C-Y>\<ESC>a" : "\<CR>"

function! FileOffset()
    return line2byte(line('.')) + col('.') - 1
endfunction
nnoremap <silent><leader>fo :echo FileOffset()<cr>

" vim:set shiftwidth=4 softtabstop=4 expandtab:
